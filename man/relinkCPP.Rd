% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forestry.R
\docType{methods}
\name{relinkCPP_prt-forestry}
\alias{relinkCPP_prt-forestry}
\alias{relinkCPP_prt-forestry}
\title{relink CPP ptr}
\usage{
relinkCPP_prt(object)

\S4method{relinkCPP_prt}{forestry}(object)
}
\arguments{
\item{object}{an object of class `forestry`}
}
\value{
A list of lists. Each sublist contains the information to span a
  tree.
}
\description{
When a `foresty` object is saved and then reloaded the Cpp
  pointers for the data set and the Cpp forest have to be reconstructed

When a `foresty` object is saved and then reloaded the Cpp
  pointers for the data set and the Cpp forest have to be reconstructed
}
\details{
#' @title R to Cpp translator
#' @name RToCpp_translator
#' @description Translates the forest to a list which can then be used with the
#'   RToCPP_translator to create an CPP forest object again
#' @param object The `forest_R` slot of a forestry object. It will be used to
#'   create the Cpp tree.
setGeneric(
  name = "RToCpp_translator",
  def = function(object) {
    standardGeneric("RToCpp_translator")
  }
)

#' @title RToCpp_translator
#' @description Add more trees to the existing forest.
#' @exportMethod RToCpp_translator
#' @inheritParams RToCpp_translator
#' @return A list of lists. Each sublist contains the information to span a
#'   tree.
setMethod(
  f = "RToCpp_translator",
  signature = "list",
  definition = function(object) {
    tryCatch({
      return(rcpp_RToCpp_translator(object))
    }, error = function(err) {
      print(err)
      return(NA)
    })
  }
)
}
\examples{
set.seed(323652639)
x <- iris[, -1]
y <- iris[, 1]
forest <- forestry(x, y, ntree = 3)
save(forest, file = "tests/testthat/forest.Rda")
load("tests/testthat/forest.Rda", verbose = TRUE)
relinkCPP_prt(forest)
}
